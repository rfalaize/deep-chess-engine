import time

import flask
from flask_cors import CORS
from flask_restplus import Api, Resource, fields, abort
import engines
import argparse
import threading
from threading import RLock
import uuid

# configure logger
from logging import getLogger, getLevelName, Formatter, StreamHandler
log = getLogger()
log.setLevel(getLevelName('INFO'))
log_formatter = Formatter("%(asctime)s [%(levelname)s] [%(threadName)s] %(name)s: %(message)s")
console_handler = StreamHandler()
console_handler.setFormatter(log_formatter)
log.addHandler(console_handler)

# create swagger app
app = flask.Flask(__name__)
CORS(app)
api = Api(app,
          version='1.0',
          title='Chess Engine API',
          description='An API to recognize hand written digits.'
)
ns = api.namespace('api/v1/chess', description='Digit recognition operations')

# create API schemas
chessEngineRequest = api.model('ChessEngineRequest', {
    'engine': fields.String(required=True, description='Name of the engine to use'),
    'fen': fields.String(required=True, description='Representation of the chess board in FEN format')
})
chessEngineResponse = api.model('ChessEngineResponse', {
    'status': fields.String(description='Status of the engine. Returns "WORKING" if the engine started the calculation.'),
    'move_id': fields.String(description='Unique ID for the move being calculated. '
                                         'The caller needs to call the /poll URL passing this move_id, '
                                         'to get the results once the move has been generated by the engine.')
})




# create routes
@ns.route('/health-check', methods=['GET'])
class HealthCheck(Resource):
    def get(self):
        # return default HTTP code 200
        return


@ns.route('/engine/generate_move', methods=['POST'])
class ChessEngine(Resource):

    @ns.expect(chessEngineRequest)
    @ns.marshal_with(chessEngineResponse, code=201)
    def post(self):
        try:
            req = api.payload
            log.info('New move generation request received: ' + str(req))

            # generate a new move id
            global moves_count
            global moves_store
            global lock
            lock.acquire()
            try:
                moves_count += 1
            finally:
                lock.release()
            move_id = 'move_id_' + str(moves_count) + '_' + str(uuid.uuid1())

            # create a thread
            worker_thread = threading.Thread(target=generate_move, args=(move_id, req['engine'], req['fen']))

            # store thread and id
            lock.acquire()
            try:
                moves_store[move_id] = {'worker_thread': worker_thread, 'status': 'WORKING', 'result': ''}
            finally:
                lock.release()

            # start worker
            worker_thread.start()

            result = {'status': 'WORKING', 'move_id': move_id}
        except Exception as e:
            log.error("Error while generating move:")
            log.exception(e)
            result = {'status': 'ERROR', 'error': str(e)}
        log.info('>>> result:' + str(result))
        return result, 201


@ns.route('/engine/get_all_moves', methods=['GET'])
class InspectMovesStore(Resource):
    def get(self):
        log.info('Retrieving all moves from moves_store...')
        results = [{
            'move_id': move_id,
            'status': moves_store[move_id]['status'],
            'result': moves_store[move_id]['result'],
            'thread_name': moves_store[move_id]['worker_thread'].getName(),
            'thread_is_alive': moves_store[move_id]['worker_thread'].is_alive()
            } for move_id in moves_store]
        log.info(results)
        return results


@ns.route('/engine/poll_move/<string:move_id>', methods=['GET'])
class PollMove(Resource):
    def get(self, move_id):
        global moves_store
        log.info("polling move_id=" + move_id + "... moves_store is " + str(moves_store))
        if move_id not in moves_store:
            log.warning("move " + move_id + " not found")
            return {'status': 'NOT FOUND'}
        result = {k: moves_store[move_id][k] for k in ('status', 'result')}
        log.info('move status:', result)
        return result


def generate_move(move_id, engine_name, fen):
    # this function will run on a dedicated thread (one per move)
    # would be better to use a queue with multiple processes (ex: celery or redis),
    # but messaging brokers are only available in Heroku premium

    engine = None
    if engine_name.upper() == 'RANDOM':
        engine = engines.rnd.engine.Engine()
    elif engine_name.upper() == 'MINIMAX.V1':
        engine = engines.minimax.v1.engine.Engine()
    elif engine_name.upper() == 'MINIMAX.V2':
        engine = engines.minimax.v2.engine.Engine()
    elif engine_name.upper() == 'MINIMAX.V3':
        engine = engines.minimax.v3.engine.Engine()
    elif engine_name.upper() == 'MCTS.V1':
        engine = engines.mcts.v1.engine.Engine()

    global moves_store
    global lock
    result = engine.generate_move(fen)
    lock.acquire()
    try:
        moves_store[move_id]['result'] = result
        moves_store[move_id]['status'] = 'DONE'
    finally:
        lock.release()
    log.info('generate_move ' + move_id + 'finished:' + str(moves_store[move_id]['result']))
    log.info('moves_store contains ' + str(moves_store))
    return


if __name__ == '__main__':

    log.info("****************************************************************")
    log.info("Starting flask application...")
    log.info("****************************************************************")

    parser = argparse.ArgumentParser()
    parser.add_argument('--env', help='Environment. DEV or PROD', type= str, default='PROD')
    parser.add_argument('--port', help='Port number', type= int, default= 0)
    args = parser.parse_args()
    log.info('Command line arguments: {}'.format(args))

    # global variables
    moves_store = {}
    moves_count = 0
    lock = RLock()

    log.info("Starting application on port {}...".format(args.port))
    app.run(host='0.0.0.0', port=args.port, debug=(args.env == 'DEV'))

